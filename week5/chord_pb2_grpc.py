# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import chord_pb2 as chord__pb2


class NodeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetFingerTable = channel.unary_unary(
                '/Node/GetFingerTable',
                request_serializer=chord__pb2.Empty.SerializeToString,
                response_deserializer=chord__pb2.ResponseFingerTable.FromString,
                )
        self.SaveData = channel.unary_unary(
                '/Node/SaveData',
                request_serializer=chord__pb2.RequestSave.SerializeToString,
                response_deserializer=chord__pb2.ResponseAction.FromString,
                )
        self.Remove = channel.unary_unary(
                '/Node/Remove',
                request_serializer=chord__pb2.RequestRemove.SerializeToString,
                response_deserializer=chord__pb2.ResponseAction.FromString,
                )
        self.Find = channel.unary_unary(
                '/Node/Find',
                request_serializer=chord__pb2.RequestFind.SerializeToString,
                response_deserializer=chord__pb2.ResponseAction.FromString,
                )
        self.Name = channel.unary_unary(
                '/Node/Name',
                request_serializer=chord__pb2.Empty.SerializeToString,
                response_deserializer=chord__pb2.Answer.FromString,
                )


class NodeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SaveData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Remove(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Find(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Name(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.GetFingerTable,
                    request_deserializer=chord__pb2.Empty.FromString,
                    response_serializer=chord__pb2.ResponseFingerTable.SerializeToString,
            ),
            'SaveData': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveData,
                    request_deserializer=chord__pb2.RequestSave.FromString,
                    response_serializer=chord__pb2.ResponseAction.SerializeToString,
            ),
            'Remove': grpc.unary_unary_rpc_method_handler(
                    servicer.Remove,
                    request_deserializer=chord__pb2.RequestRemove.FromString,
                    response_serializer=chord__pb2.ResponseAction.SerializeToString,
            ),
            'Find': grpc.unary_unary_rpc_method_handler(
                    servicer.Find,
                    request_deserializer=chord__pb2.RequestFind.FromString,
                    response_serializer=chord__pb2.ResponseAction.SerializeToString,
            ),
            'Name': grpc.unary_unary_rpc_method_handler(
                    servicer.Name,
                    request_deserializer=chord__pb2.Empty.FromString,
                    response_serializer=chord__pb2.Answer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Node', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Node(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/GetFingerTable',
            chord__pb2.Empty.SerializeToString,
            chord__pb2.ResponseFingerTable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SaveData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/SaveData',
            chord__pb2.RequestSave.SerializeToString,
            chord__pb2.ResponseAction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Remove(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/Remove',
            chord__pb2.RequestRemove.SerializeToString,
            chord__pb2.ResponseAction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Find(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/Find',
            chord__pb2.RequestFind.SerializeToString,
            chord__pb2.ResponseAction.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Name(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Node/Name',
            chord__pb2.Empty.SerializeToString,
            chord__pb2.Answer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class RegistryStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/Registry/Register',
                request_serializer=chord__pb2.RequestRegister.SerializeToString,
                response_deserializer=chord__pb2.ResponseRegister.FromString,
                )
        self.Deregister = channel.unary_unary(
                '/Registry/Deregister',
                request_serializer=chord__pb2.RequestDeregister.SerializeToString,
                response_deserializer=chord__pb2.ResponseDeregister.FromString,
                )
        self.PopulateFingerTable = channel.unary_unary(
                '/Registry/PopulateFingerTable',
                request_serializer=chord__pb2.RequestPopulateFingerTable.SerializeToString,
                response_deserializer=chord__pb2.ResponsePopulateFingerTable.FromString,
                )
        self.GetChordInfo = channel.unary_unary(
                '/Registry/GetChordInfo',
                request_serializer=chord__pb2.Empty.SerializeToString,
                response_deserializer=chord__pb2.ResponseGetChord.FromString,
                )
        self.Name = channel.unary_unary(
                '/Registry/Name',
                request_serializer=chord__pb2.Empty.SerializeToString,
                response_deserializer=chord__pb2.Answer.FromString,
                )


class RegistryServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PopulateFingerTable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetChordInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Name(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=chord__pb2.RequestRegister.FromString,
                    response_serializer=chord__pb2.ResponseRegister.SerializeToString,
            ),
            'Deregister': grpc.unary_unary_rpc_method_handler(
                    servicer.Deregister,
                    request_deserializer=chord__pb2.RequestDeregister.FromString,
                    response_serializer=chord__pb2.ResponseDeregister.SerializeToString,
            ),
            'PopulateFingerTable': grpc.unary_unary_rpc_method_handler(
                    servicer.PopulateFingerTable,
                    request_deserializer=chord__pb2.RequestPopulateFingerTable.FromString,
                    response_serializer=chord__pb2.ResponsePopulateFingerTable.SerializeToString,
            ),
            'GetChordInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetChordInfo,
                    request_deserializer=chord__pb2.Empty.FromString,
                    response_serializer=chord__pb2.ResponseGetChord.SerializeToString,
            ),
            'Name': grpc.unary_unary_rpc_method_handler(
                    servicer.Name,
                    request_deserializer=chord__pb2.Empty.FromString,
                    response_serializer=chord__pb2.Answer.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Registry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Registry(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/Register',
            chord__pb2.RequestRegister.SerializeToString,
            chord__pb2.ResponseRegister.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/Deregister',
            chord__pb2.RequestDeregister.SerializeToString,
            chord__pb2.ResponseDeregister.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PopulateFingerTable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/PopulateFingerTable',
            chord__pb2.RequestPopulateFingerTable.SerializeToString,
            chord__pb2.ResponsePopulateFingerTable.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetChordInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/GetChordInfo',
            chord__pb2.Empty.SerializeToString,
            chord__pb2.ResponseGetChord.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Name(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Registry/Name',
            chord__pb2.Empty.SerializeToString,
            chord__pb2.Answer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
